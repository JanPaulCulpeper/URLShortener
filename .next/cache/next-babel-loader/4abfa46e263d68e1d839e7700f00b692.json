{"ast":null,"code":"// We import packages in commonjs like so\nconst express = require('express');\n\nconst bodyparser = require('body-parser');\n\nconst next = require('next');\n\nconst dotenv = require('dotenv');\n\nconst cookieParser = require('cookie-parser');\n\nconst connectDB = require('./services/db');\n\nconst authRoutes = require('./routes/auth');\n\nconst urlRoutes = require('./routes/url');\n\nconst redirect = require('./middleware/url');\n/*\n we check nodejs' environmental\n variable to see wether\n we are in proudction or\n development mode\n */\n\n\nconst dev = true;\n/*\nWe initialize our next\napplication passing\nan object containing\nthat our NODE_ENV value\n*/\n\nconst app = next({\n  dev\n});\n/*\nEverything that happens in express has to pass\nthrough nextjs as well, this way\n next can preform server side operations.\n We create such handler to handle all incoming requests.\n*/\n\nconst handle = app.getRequestHandler();\n/*\nWe make sure nextjs is up an\nrunning and THEN we work\nwith initializing our express server\n*/\n\napp.prepare().then(() => {\n  // initialize our express server\n  const server = express(); // connect to debug\n\n  connectDB(); // choose where to server locally\n  // if the default port is taken then we assign in 5000\n\n  const PORT = process.env.PORT || 5000; // get the environmental variables in our .env file\n\n  dotenv.config(); // we tell our server with what type of data we will be sending and recieving:\n  // form data\n\n  server.use(bodyparser.urlencoded({\n    extended: false\n  })); // json data\n\n  server.use(bodyparser.json({\n    limit: '50mb'\n  }));\n  server.use(cookieParser()); // api route handling\n\n  server.use('/api/auth', authRoutes);\n  server.use('/api/url', urlRoutes); // We let nextjs handle all incoming requests the \"*\" is regex for \"all\"\n\n  server.get('*', redirect, (req, res) => handle(req, res)); // We tell our server to serve our app to the selected port\n\n  server.listen(PORT, err => {\n    if (err) throw err; // the yellow line indicates that logging is only for\n    // debugging purposes and should never be part\n    // of deployment\n\n    console.log(` The app is running on port: ${PORT}`);\n  });\n});","map":{"version":3,"sources":["/home/luisfcaro/programming/semester-project-team-j/index.js"],"names":["express","require","bodyparser","next","dotenv","cookieParser","connectDB","authRoutes","urlRoutes","redirect","dev","app","handle","getRequestHandler","prepare","then","server","PORT","process","env","config","use","urlencoded","extended","json","limit","get","req","res","listen","err","console","log"],"mappings":"AAAA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,kBAAD,CAAxB;AACA;;;;;;;;AAMA,MAAMS,GAAG,OAAT;AAEA;;;;;;;AAMA,MAAMC,GAAG,GAAGR,IAAI,CAAC;AAAEO,EAAAA;AAAF,CAAD,CAAhB;AAEA;;;;;;;AAMA,MAAME,MAAM,GAAGD,GAAG,CAACE,iBAAJ,EAAf;AAEA;;;;;;AAKAF,GAAG,CAACG,OAAJ,GAAcC,IAAd,CAAmB,MAAM;AACvB;AACA,QAAMC,MAAM,GAAGhB,OAAO,EAAtB,CAFuB,CAIvB;;AACAM,EAAAA,SAAS,GALc,CAOvB;AACA;;AACA,QAAMW,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,CATuB,CAWvB;;AACAb,EAAAA,MAAM,CAACgB,MAAP,GAZuB,CAavB;AAEA;;AACAJ,EAAAA,MAAM,CAACK,GAAP,CAAWnB,UAAU,CAACoB,UAAX,CAAsB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAtB,CAAX,EAhBuB,CAiBvB;;AACAP,EAAAA,MAAM,CAACK,GAAP,CAAWnB,UAAU,CAACsB,IAAX,CAAgB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAhB,CAAX;AACAT,EAAAA,MAAM,CAACK,GAAP,CAAWhB,YAAY,EAAvB,EAnBuB,CAqBvB;;AACAW,EAAAA,MAAM,CAACK,GAAP,CAAW,WAAX,EAAwBd,UAAxB;AACAS,EAAAA,MAAM,CAACK,GAAP,CAAW,UAAX,EAAuBb,SAAvB,EAvBuB,CAyBvB;;AACAQ,EAAAA,MAAM,CAACU,GAAP,CAAW,GAAX,EAAgBjB,QAAhB,EAA0B,CAACkB,GAAD,EAAMC,GAAN,KAAchB,MAAM,CAACe,GAAD,EAAMC,GAAN,CAA9C,EA1BuB,CA4BvB;;AACAZ,EAAAA,MAAM,CAACa,MAAP,CAAcZ,IAAd,EAAqBa,GAAD,IAAS;AAC3B,QAAIA,GAAJ,EAAS,MAAMA,GAAN,CADkB,CAG3B;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,gCAA+Bf,IAAK,EAAjD;AACD,GAPD;AAQD,CArCD","sourcesContent":["// We import packages in commonjs like so\n\nconst express = require('express');\nconst bodyparser = require('body-parser');\nconst next = require('next');\nconst dotenv = require('dotenv');\nconst cookieParser = require('cookie-parser');\nconst connectDB = require('./services/db');\nconst authRoutes = require('./routes/auth');\nconst urlRoutes = require('./routes/url');\nconst redirect = require('./middleware/url');\n/*\n we check nodejs' environmental\n variable to see wether\n we are in proudction or\n development mode\n */\nconst dev = process.env.NODE_ENV !== 'production';\n\n/*\nWe initialize our next\napplication passing\nan object containing\nthat our NODE_ENV value\n*/\nconst app = next({ dev });\n\n/*\nEverything that happens in express has to pass\nthrough nextjs as well, this way\n next can preform server side operations.\n We create such handler to handle all incoming requests.\n*/\nconst handle = app.getRequestHandler();\n\n/*\nWe make sure nextjs is up an\nrunning and THEN we work\nwith initializing our express server\n*/\napp.prepare().then(() => {\n  // initialize our express server\n  const server = express();\n\n  // connect to debug\n  connectDB();\n\n  // choose where to server locally\n  // if the default port is taken then we assign in 5000\n  const PORT = process.env.PORT || 5000;\n\n  // get the environmental variables in our .env file\n  dotenv.config();\n  // we tell our server with what type of data we will be sending and recieving:\n\n  // form data\n  server.use(bodyparser.urlencoded({ extended: false }));\n  // json data\n  server.use(bodyparser.json({ limit: '50mb' }));\n  server.use(cookieParser());\n\n  // api route handling\n  server.use('/api/auth', authRoutes);\n  server.use('/api/url', urlRoutes);\n\n  // We let nextjs handle all incoming requests the \"*\" is regex for \"all\"\n  server.get('*', redirect, (req, res) => handle(req, res));\n\n  // We tell our server to serve our app to the selected port\n  server.listen(PORT, (err) => {\n    if (err) throw err;\n\n    // the yellow line indicates that logging is only for\n    // debugging purposes and should never be part\n    // of deployment\n    console.log(` The app is running on port: ${PORT}`);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}