{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider, useDispatch } from 'react-redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { authActions } from '../store/actions';\nimport store from '../services/redux';\nimport '../app.css';\nimport 'fontsource-roboto';\nimport 'react-toastify/dist/ReactToastify.css';\nconst theme = {};\n\nconst Child = ({\n  Component,\n  pageProps\n}) => {\n  const dispatch = useDispatch();\n  const init = React.useCallback(() => {\n    dispatch(authActions.verifyAuth());\n  }, [dispatch]);\n  React.useEffect(() => {\n    init();\n    const jssStyles = document.querySelector('#jss-server-side');\n    if (jssStyles && jssStyles.parentNode) jssStyles.parentNode.removeChild(jssStyles);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Component, pageProps));\n};\n\nconst App = props => {\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: store\n  }, __jsx(ThemeProvider, {\n    theme: theme\n  }, __jsx(\"div\", null, __jsx(Child, props)))));\n};\n\nChild.defaultProps = {\n  pageProps: {}\n};\n\nconst makestore = () => store;\n\nconst wrapper = createWrapper(makestore);\nexport default wrapper.withRedux(App);",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
