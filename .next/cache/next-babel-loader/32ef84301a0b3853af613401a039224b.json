{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { authTypes } from './types';\nvar AUTH_ACTION_FAILED = authTypes.AUTH_ACTION_FAILED,\n    SIGNIN = authTypes.SIGNIN; // export const logouot = () => (dispatch, getState) => {};\n\nexport var signup = function signup(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('http://localhost:5000/api/auth/signup', {\n                method: 'POST',\n                body: JSON.stringify({\n                  email: email,\n                  password: password\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n\n              if (data.errors) {\n                dispatch({\n                  type: AUTH_ACTION_FAILED,\n                  payload: data.errors\n                });\n              }\n\n              if (data.user) {\n                dispatch({\n                  type: SIGNIN,\n                  payload: data.user\n                });\n              }\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: AUTH_ACTION_FAILED,\n                payload: _context.t0\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var login = function login() {};",
  "map": {
    "version": 3,
    "sources": [
      "/home/luisfcaro/programming/semester-project-team-j/store/actions/auth.js"
    ],
    "names": [
      "authTypes",
      "AUTH_ACTION_FAILED",
      "SIGNIN",
      "signup",
      "email",
      "password",
      "dispatch",
      "fetch",
      "method",
      "body",
      "JSON",
      "stringify",
      "headers",
      "res",
      "json",
      "data",
      "errors",
      "type",
      "payload",
      "user",
      "login"
    ],
    "mappings": ";;AAAA,SAASA,SAAT,QAA0B,SAA1B;IAEQC,kB,GAA+BD,S,CAA/BC,kB;IAAoBC,M,GAAWF,S,CAAXE,M,EAE5B;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,QAAV,QAAUA,QAAV;AAAA;AAAA,yEAAyB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEzBC,KAAK,CAAC,uCAAD,EAA0C;AAC/DC,gBAAAA,MAAM,EAAE,MADuD;AAE/DC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,QAAQ,EAARA;AAAT,iBAAf,CAFyD;AAG/DO,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB;AAHsD,eAA1C,CAFoB;;AAAA;AAErCC,cAAAA,GAFqC;AAAA;AAAA,qBAOxBA,GAAG,CAACC,IAAJ,EAPwB;;AAAA;AAOrCC,cAAAA,IAPqC;;AAS3C,kBAAIA,IAAI,CAACC,MAAT,EAAiB;AACfV,gBAAAA,QAAQ,CAAC;AAAEW,kBAAAA,IAAI,EAAEhB,kBAAR;AAA4BiB,kBAAAA,OAAO,EAAEH,IAAI,CAACC;AAA1C,iBAAD,CAAR;AACD;;AACD,kBAAID,IAAI,CAACI,IAAT,EAAe;AACbb,gBAAAA,QAAQ,CAAC;AAAEW,kBAAAA,IAAI,EAAEf,MAAR;AAAgBgB,kBAAAA,OAAO,EAAEH,IAAI,CAACI;AAA9B,iBAAD,CAAR;AACD;;AAd0C;AAAA;;AAAA;AAAA;AAAA;AAgB3Cb,cAAAA,QAAQ,CAAC;AAAEW,gBAAAA,IAAI,EAAEhB,kBAAR;AAA4BiB,gBAAAA,OAAO;AAAnC,eAAD,CAAR;;AAhB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAoBP,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ,GAAM,CAAE,CAAtB",
    "sourcesContent": [
      "import { authTypes } from './types';\n\nconst { AUTH_ACTION_FAILED, SIGNIN } = authTypes;\n\n// export const logouot = () => (dispatch, getState) => {};\nexport const signup = ({ email, password }) => async (dispatch) => {\n  try {\n    const res = await fetch('http://localhost:5000/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const data = await res.json();\n\n    if (data.errors) {\n      dispatch({ type: AUTH_ACTION_FAILED, payload: data.errors });\n    }\n    if (data.user) {\n      dispatch({ type: SIGNIN, payload: data.user });\n    }\n  } catch (err) {\n    dispatch({ type: AUTH_ACTION_FAILED, payload: err });\n  }\n};\n\nexport const login = () => {};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
