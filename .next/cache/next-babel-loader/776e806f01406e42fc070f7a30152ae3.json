{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst User = require('../models/user');\n\nconst handleErrors = err => {\n  const errors = {\n    email: '',\n    password: ''\n  };\n\n  if (err.message.includes('Incorrect email')) {\n    errors.email = 'The email you entered is not valid';\n  }\n\n  if (err.message.includes('Incorrect password')) {\n    errors.password = 'The password you entered is incorrect';\n  }\n\n  if (err.code === 11000) {\n    errors.email = 'The email you entered is already registered';\n  }\n\n  if (err.message.includes('user validation failed')) {\n    Object.values(err.errors).forEach(({\n      properties\n    }) => {\n      errors[properties.path] = properties.message;\n    });\n  }\n\n  return errors;\n};\n\nconst maxAge = 3 * 24 * 60 * 60;\n\nconst createToken = id => {\n  return jwt.sign({\n    id\n  }, process.env.JWT_SECRET, {\n    expiresIn: maxAge\n  });\n};\n\nconst signupPost = async (req, res) => {\n  const {\n    email,\n    password,\n    userName\n  } = req.body;\n\n  try {\n    const user = await User.create({\n      email,\n      password,\n      userName\n    });\n    const token = createToken(user._id);\n    res.cookie('urlshort', token, {\n      httpOnly: true,\n      maxAge: maxAge * 1000\n    });\n    res.status(201).json({\n      user\n    });\n  } catch (err) {\n    const errors = handleErrors(err);\n    res.status(400).json({\n      errors\n    });\n  }\n};\n\nconst loginPost = async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    const user = await User.login(email, password);\n    const token = createToken(user);\n    res.cookie('urlshort', token, {\n      httpOnly: true,\n      maxAge: maxAge * 1000\n    });\n    res.status(200).json({\n      user\n    });\n  } catch (err) {\n    const errors = handleErrors(err);\n    res.status(400).json({\n      errors\n    });\n  }\n};\n\nconst logoutGet = async (req, res) => {\n  await res.cookie('jwt', '', {\n    maxAge: 1\n  });\n  res.status(200).json({\n    user: null\n  });\n};\n\nconst verifyAuth = async (req, res) => {\n  const token = req.cookies.urlshort;\n\n  if (token) {\n    jwt.verify(token, process.env.JWT_SECRET, (err, decodedToken) => {\n      if (err) {\n        res.json({\n          user: null\n        });\n      } else {\n        res.status(200).json({\n          user: decodedToken.id\n        });\n      }\n    });\n  } else {\n    res.json({\n      user: null\n    });\n  }\n};\n\nmodule.exports = {\n  verifyAuth,\n  signupPost,\n  loginPost,\n  logoutGet\n};","map":{"version":3,"sources":["/home/luisfcaro/programming/semester-project-team-j/controllers/auth.js"],"names":["jwt","require","User","handleErrors","err","errors","email","password","message","includes","code","Object","values","forEach","properties","path","maxAge","createToken","id","sign","process","env","JWT_SECRET","expiresIn","signupPost","req","res","userName","body","user","create","token","_id","cookie","httpOnly","status","json","loginPost","login","logoutGet","verifyAuth","cookies","urlshort","verify","decodedToken","module","exports"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken');\nconst User = require('../models/user');\n\nconst handleErrors = (err) => {\n  const errors = { email: '', password: '' };\n\n  if (err.message.includes('Incorrect email')) {\n    errors.email = 'The email you entered is not valid';\n  }\n  if (err.message.includes('Incorrect password')) {\n    errors.password = 'The password you entered is incorrect';\n  }\n  if (err.code === 11000) {\n    errors.email = 'The email you entered is already registered';\n  }\n  if (err.message.includes('user validation failed')) {\n    Object.values(err.errors).forEach(({ properties }) => {\n      errors[properties.path] = properties.message;\n    });\n  }\n\n  return errors;\n};\n\nconst maxAge = 3 * 24 * 60 * 60;\nconst createToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\n    expiresIn: maxAge\n  });\n};\n\nconst signupPost = async (req, res) => {\n  const { email, password, userName } = req.body;\n\n  try {\n    const user = await User.create({ email, password, userName });\n    const token = createToken(user._id);\n    res.cookie('urlshort', token, { httpOnly: true, maxAge: maxAge * 1000 });\n    res.status(201).json({ user });\n  } catch (err) {\n    const errors = handleErrors(err);\n    res.status(400).json({ errors });\n  }\n};\nconst loginPost = async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    const user = await User.login(email, password);\n    const token = createToken(user);\n    res.cookie('urlshort', token, { httpOnly: true, maxAge: maxAge * 1000 });\n    res.status(200).json({ user });\n  } catch (err) {\n    const errors = handleErrors(err);\n    res.status(400).json({ errors });\n  }\n};\n\nconst logoutGet = async (req, res) => {\n  await res.cookie('jwt', '', { maxAge: 1 });\n  res.status(200).json({ user: null });\n};\n\nconst verifyAuth = async (req, res) => {\n  const token = req.cookies.urlshort;\n\n  if (token) {\n    jwt.verify(token, process.env.JWT_SECRET, (err, decodedToken) => {\n      if (err) {\n        res.json({ user: null });\n      } else {\n        res.status(200).json({ user: decodedToken.id });\n      }\n    });\n  } else {\n    res.json({ user: null });\n  }\n};\n\nmodule.exports = {\n  verifyAuth,\n  signupPost,\n  loginPost,\n  logoutGet\n};\n"]},"metadata":{},"sourceType":"script"}