{
  "ast": null,
  "code": "const mongoose = require('mongoose');\n\nconst {\n  isEmail\n} = require('validator');\n\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema({\n  userName: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter a user name']\n  },\n  email: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter an email address'],\n    validate: [isEmail, 'Please enter a valid email address']\n  },\n  password: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please enter a password'],\n    minlength: [8, 'Password must be at least 8 characters']\n  }\n});\n\nasync function hash(next) {\n  const salt = await bcrypt.genSalt();\n  this.password = await bcrypt.hash(this.password, salt);\n  next();\n}\n\nuserSchema.pre('save', hash);\n\nasync function verifyPassword(email, password) {\n  const user = await this.findOne({\n    email\n  });\n\n  if (user) {\n    const auth = await bcrypt.compare(password, user.password);\n\n    if (auth) {\n      return user;\n    }\n\n    throw Error('Incorrect password');\n  }\n\n  throw Error('Incorrect email');\n}\n\nuserSchema.statics.login = verifyPassword;\nmodule.exports = mongoose.model('user', userSchema);",
  "map": {
    "version": 3,
    "sources": [
      "/home/luisfcaro/programming/semester-project-team-j/models/user.js"
    ],
    "names": [
      "mongoose",
      "require",
      "isEmail",
      "bcrypt",
      "userSchema",
      "Schema",
      "userName",
      "type",
      "String",
      "trim",
      "default",
      "unique",
      "required",
      "email",
      "validate",
      "password",
      "minlength",
      "hash",
      "next",
      "salt",
      "genSalt",
      "pre",
      "verifyPassword",
      "user",
      "findOne",
      "auth",
      "compare",
      "Error",
      "statics",
      "login",
      "module",
      "exports",
      "model"
    ],
    "mappings": "AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,IAAI,EAAE,IAFE;AAGRC,IAAAA,OAAO,EAAE,EAHD;AAIRC,IAAAA,MAAM,EAAE,IAJA;AAKRC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,0BAAP;AALF,GAD2B;AAQrCC,EAAAA,KAAK,EAAE;AACLN,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLC,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,MAAM,EAAE,IAJH;AAKLC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,+BAAP,CALL;AAMLE,IAAAA,QAAQ,EAAE,CAACZ,OAAD,EAAU,oCAAV;AANL,GAR8B;AAgBrCa,EAAAA,QAAQ,EAAE;AACRR,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,IAAI,EAAE,IAFE;AAGRC,IAAAA,OAAO,EAAE,EAHD;AAIRE,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,yBAAP,CAJF;AAKRI,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,wCAAJ;AALH;AAhB2B,CAApB,CAAnB;;AAyBA,eAAeC,IAAf,CAAoBC,IAApB,EAA0B;AACxB,QAAMC,IAAI,GAAG,MAAMhB,MAAM,CAACiB,OAAP,EAAnB;AACA,OAAKL,QAAL,GAAgB,MAAMZ,MAAM,CAACc,IAAP,CAAY,KAAKF,QAAjB,EAA2BI,IAA3B,CAAtB;AACAD,EAAAA,IAAI;AACL;;AAEDd,UAAU,CAACiB,GAAX,CAAe,MAAf,EAAuBJ,IAAvB;;AAEA,eAAeK,cAAf,CAA8BT,KAA9B,EAAqCE,QAArC,EAA+C;AAC7C,QAAMQ,IAAI,GAAG,MAAM,KAAKC,OAAL,CAAa;AAAEX,IAAAA;AAAF,GAAb,CAAnB;;AACA,MAAIU,IAAJ,EAAU;AACR,UAAME,IAAI,GAAG,MAAMtB,MAAM,CAACuB,OAAP,CAAeX,QAAf,EAAyBQ,IAAI,CAACR,QAA9B,CAAnB;;AACA,QAAIU,IAAJ,EAAU;AACR,aAAOF,IAAP;AACD;;AACD,UAAMI,KAAK,CAAC,oBAAD,CAAX;AACD;;AAED,QAAMA,KAAK,CAAC,iBAAD,CAAX;AACD;;AAEDvB,UAAU,CAACwB,OAAX,CAAmBC,KAAnB,GAA2BP,cAA3B;AAEAQ,MAAM,CAACC,OAAP,GAAiB/B,QAAQ,CAACgC,KAAT,CAAe,MAAf,EAAuB5B,UAAvB,CAAjB",
    "sourcesContent": [
      "const mongoose = require('mongoose');\nconst { isEmail } = require('validator');\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema({\n  userName: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter a user name']\n  },\n  email: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter an email address'],\n    validate: [isEmail, 'Please enter a valid email address']\n  },\n  password: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please enter a password'],\n    minlength: [8, 'Password must be at least 8 characters']\n  }\n});\n\nasync function hash(next) {\n  const salt = await bcrypt.genSalt();\n  this.password = await bcrypt.hash(this.password, salt);\n  next();\n}\n\nuserSchema.pre('save', hash);\n\nasync function verifyPassword(email, password) {\n  const user = await this.findOne({ email });\n  if (user) {\n    const auth = await bcrypt.compare(password, user.password);\n    if (auth) {\n      return user;\n    }\n    throw Error('Incorrect password');\n  }\n\n  throw Error('Incorrect email');\n}\n\nuserSchema.statics.login = verifyPassword;\n\nmodule.exports = mongoose.model('user', userSchema);\n"
    ]
  },
  "metadata": {},
  "sourceType": "script"
}
