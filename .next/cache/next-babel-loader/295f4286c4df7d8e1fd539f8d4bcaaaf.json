{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Avatar, MenuItem, Popper, IconButton, Paper, MenuList, Grow, ClickAwayListener } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  paper: {\n    marginRight: theme.spacing(2)\n  },\n  avatar: {\n    backgroundColor: purple[500]\n  }\n}));\n\nconst UserIcon = ({\n  Letter,\n  Actions\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  } // return focus to the button when we transitioned from !open -> open\n\n\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  return __jsx(React.Fragment, null, __jsx(IconButton, {\n    ref: anchorRef,\n    \"aria-controls\": open ? 'menu-list-grow' : undefined,\n    \"aria-haspopup\": \"true\",\n    onClick: handleToggle\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, Letter)), __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", null, __jsx(Popper, {\n    open: open,\n    anchorEl: anchorRef.current,\n    role: undefined,\n    transition: true,\n    disablePortal: true\n  }, ({\n    TransitionProps,\n    placement\n  }) => __jsx(Grow, _extends({}, TransitionProps, {\n    style: {\n      transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n    }\n  }), __jsx(Paper, null, __jsx(ClickAwayListener, {\n    onClickAway: handleClose\n  }, __jsx(MenuList, {\n    autoFocusItem: open,\n    id: \"menu-list-grow\",\n    onKeyDown: handleListKeyDown\n  }, Actions.map(action => {\n    return __jsx(MenuItem, {\n      onClick: e => {\n        action.act();\n        handleClose(e);\n      }\n    }, action.name);\n  })))))))));\n};\n\nUserIcon.defaultProps = {\n  Letter: 'E',\n  Actions: [{\n    name: 'ex1'\n  }, {\n    name: 'ex2'\n  }, {\n    name: 'ex3'\n  }]\n};\nexport default UserIcon;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
