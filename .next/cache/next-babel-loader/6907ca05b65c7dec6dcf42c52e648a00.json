{
  "ast": null,
  "code": "import { authTypes } from './types';\nconst {\n  AUTH_ACTION_FAILED,\n  SIGNIN\n} = authTypes;\nexport const verifyAuth = () => async dispatch => {\n  try {\n    const res = await fetch('http://localhost:3000/api/auth/verify');\n    dispatch({\n      type: SIGNIN,\n      payload: (await res.json()).user\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ACTION_FAILED,\n      payload: err\n    });\n  }\n};\nexport const login = credentials => async dispatch => {\n  try {\n    const res = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    console.log(data);\n\n    if (data.errors) {\n      dispatch({\n        type: AUTH_ACTION_FAILED,\n        payload: data.errors\n      });\n    }\n\n    if (data.user) {\n      dispatch({\n        type: SIGNIN,\n        payload: data.user\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: AUTH_ACTION_FAILED,\n      payload: err\n    });\n  }\n}; // export const logouot = () => (dispatch, getState) => {};\n\nexport const signup = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const res = await fetch('http://localhost:5000/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    console.log(data);\n\n    if (data.errors) {\n      dispatch({\n        type: AUTH_ACTION_FAILED,\n        payload: data.errors\n      });\n    }\n\n    if (data.user) {\n      dispatch({\n        type: SIGNIN,\n        payload: data.user\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: AUTH_ACTION_FAILED,\n      payload: err\n    });\n  }\n};",
  "map": {
    "version": 3,
    "sources": [
      "/home/luisfcaro/programming/semester-project-team-j/store/actions/auth.js"
    ],
    "names": [
      "authTypes",
      "AUTH_ACTION_FAILED",
      "SIGNIN",
      "verifyAuth",
      "dispatch",
      "res",
      "fetch",
      "type",
      "payload",
      "json",
      "user",
      "err",
      "login",
      "credentials",
      "method",
      "body",
      "JSON",
      "stringify",
      "headers",
      "data",
      "console",
      "log",
      "errors",
      "signup",
      "email",
      "password"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { authTypes } from './types';\n\nconst { AUTH_ACTION_FAILED, SIGNIN } = authTypes;\n\nexport const verifyAuth = () => async (dispatch) => {\n  try {\n    const res = await fetch('http://localhost:3000/api/auth/verify');\n    dispatch({ type: SIGNIN, payload: (await res.json()).user });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ACTION_FAILED,\n      payload: err\n    });\n  }\n};\n\nexport const login = (credentials) => async (dispatch) => {\n  try {\n    const res = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const data = await res.json();\n\n    console.log(data);\n\n    if (data.errors) {\n      dispatch({ type: AUTH_ACTION_FAILED, payload: data.errors });\n    }\n    if (data.user) {\n      dispatch({ type: SIGNIN, payload: data.user });\n    }\n  } catch (err) {\n    dispatch({ type: AUTH_ACTION_FAILED, payload: err });\n  }\n};\n// export const logouot = () => (dispatch, getState) => {};\nexport const signup = ({ email, password }) => async (dispatch) => {\n  try {\n    const res = await fetch('http://localhost:5000/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const data = await res.json();\n\n    console.log(data);\n\n    if (data.errors) {\n      dispatch({ type: AUTH_ACTION_FAILED, payload: data.errors });\n    }\n    if (data.user) {\n      dispatch({ type: SIGNIN, payload: data.user });\n    }\n  } catch (err) {\n    dispatch({ type: AUTH_ACTION_FAILED, payload: err });\n  }\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
