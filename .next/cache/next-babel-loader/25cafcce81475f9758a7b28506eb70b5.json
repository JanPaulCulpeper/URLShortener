{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useRouter } from 'next/router';\nimport Navigation from '../components/Navigation';\nimport { authSelectors, urlSelectors } from '../store/selectors';\nimport { authActions, urlActions } from '../store/actions';\nimport UserIcon from '../components/UserIcon';\nimport Form from '../components/Form';\nimport URL from '../constants';\n\nconst Home = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const authToken = useSelector(authSelectors.selectAuthToken);\n  const currentUrl = useSelector(urlSelectors.selectCurrentUrl);\n  const [values, setValues] = React.useState({\n    url: '',\n    custom: ''\n  });\n  const {\n    url,\n    custom\n  } = values;\n  const [current, setCurrent] = React.useState(null);\n  const loading = useSelector(authSelectors.selectLoading);\n  const urlError = useSelector(urlSelectors.selectError);\n  const handleSubmit = React.useCallback(e => {\n    e.preventDefault();\n    setCurrent(custom);\n\n    if (authToken) {\n      if (url !== '' && custom !== '') {\n        dispatch(urlActions.shorten({\n          custom,\n          url\n        }));\n      } else toast('Cannot have empty fields!', {\n        type: 'error'\n      });\n    }\n  }, [values, current]);\n  const Logout = React.useCallback(async () => {\n    dispatch(authActions.logout());\n  }, [dispatch, authActions]);\n  React.useEffect(() => {\n    if (urlError) toast(urlError, {\n      type: 'error'\n    });\n  }, [urlError]);\n  return __jsx(React.Fragment, null, !authToken && loading ? 'Loading...' : __jsx(React.Fragment, null, __jsx(ToastContainer, null), __jsx(Navigation, {\n    Title: \"URL-shortener\",\n    Links: [{\n      title: 'Login',\n      ref: '/login',\n      condition: !!authToken,\n      replacement: __jsx(UserIcon, {\n        Actions: [{\n          name: 'Dashboard',\n          act: () => router.push('/dashboard')\n        }, {\n          name: 'Logout',\n          act: Logout\n        }],\n        Letter: authToken === null || authToken === void 0 ? void 0 : authToken.userName[0]\n      })\n    }]\n  }), __jsx(Form, {\n    Title: \"Shorten your URL\",\n    ParentState: [values, setValues],\n    SubmitFunction: handleSubmit,\n    Inputs: [{\n      label: 'URL',\n      id: 'url',\n      type: 'text'\n    }, {\n      id: 'custom',\n      type: 'text',\n      exteriorLabel: `your-custom-path`\n    }],\n    LowerText: {\n      info: currentUrl ? null : `${URL}${values.custom || 'your custom path'}`,\n      link: authToken ? {\n        name: currentUrl ? `${URL}${current}` : null,\n        ref: currentUrl ? `${URL}${current}` : null\n      } : {}\n    }\n  }), ' '));\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}