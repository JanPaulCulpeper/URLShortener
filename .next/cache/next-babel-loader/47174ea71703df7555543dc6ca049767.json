{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar mongoose = require('mongoose');\n\nvar _require = require('validator'),\n    isEmail = _require.isEmail;\n\nvar bcrypt = require('bcrypt');\n\nvar userSchema = new mongoose.Schema({\n  userName: {\n    type: String,\n    trim: true,\n    \"default\": '',\n    unique: true,\n    required: [true, 'Please enter a user name']\n  },\n  email: {\n    type: String,\n    trim: true,\n    \"default\": '',\n    unique: true,\n    required: [true, 'Please enter an email address'],\n    validate: [isEmail, 'Please enter a valid email address']\n  },\n  password: {\n    type: String,\n    trim: true,\n    \"default\": '',\n    required: [true, 'Please enter a password'],\n    minlength: [8, 'Password must be at least 8 characters']\n  }\n});\n\nfunction hash(_x) {\n  return _hash.apply(this, arguments);\n}\n\nfunction _hash() {\n  _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(next) {\n    var salt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return bcrypt.genSalt();\n\n          case 2:\n            salt = _context.sent;\n            _context.next = 5;\n            return bcrypt.hash(this.password, salt);\n\n          case 5:\n            this.password = _context.sent;\n            next();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _hash.apply(this, arguments);\n}\n\nuserSchema.pre('save', hash);\n\nfunction verifyPassword(_x2, _x3) {\n  return _verifyPassword.apply(this, arguments);\n}\n\nfunction _verifyPassword() {\n  _verifyPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, password) {\n    var user, auth;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return this.findOne({\n              email: email\n            });\n\n          case 2:\n            user = _context2.sent;\n\n            if (!user) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 6;\n            return bcrypt.compare(password, user.password);\n\n          case 6:\n            auth = _context2.sent;\n\n            if (!auth) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", user);\n\n          case 9:\n            throw Error('Incorrect password');\n\n          case 10:\n            throw Error('Incorrect email');\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _verifyPassword.apply(this, arguments);\n}\n\nuserSchema.statics.login = verifyPassword;\nmodule.exports = mongoose.model('user', userSchema);","map":{"version":3,"sources":["/home/luisfcaro/programming/semester-project-team-j/models/user.js"],"names":["mongoose","require","isEmail","bcrypt","userSchema","Schema","userName","type","String","trim","unique","required","email","validate","password","minlength","hash","next","genSalt","salt","pre","verifyPassword","findOne","user","compare","auth","Error","statics","login","module","exports","model"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;eACoBA,OAAO,CAAC,WAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,IAAI,EAAE,IAFE;AAGR,eAAS,EAHD;AAIRC,IAAAA,MAAM,EAAE,IAJA;AAKRC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,0BAAP;AALF,GAD2B;AAQrCC,EAAAA,KAAK,EAAE;AACLL,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGL,eAAS,EAHJ;AAILC,IAAAA,MAAM,EAAE,IAJH;AAKLC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,+BAAP,CALL;AAMLE,IAAAA,QAAQ,EAAE,CAACX,OAAD,EAAU,oCAAV;AANL,GAR8B;AAgBrCY,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,IAAI,EAAE,IAFE;AAGR,eAAS,EAHD;AAIRE,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,yBAAP,CAJF;AAKRI,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,wCAAJ;AALH;AAhB2B,CAApB,CAAnB;;SAyBeC,I;;;;;mEAAf,iBAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBd,MAAM,CAACe,OAAP,EADrB;;AAAA;AACQC,YAAAA,IADR;AAAA;AAAA,mBAEwBhB,MAAM,CAACa,IAAP,CAAY,KAAKF,QAAjB,EAA2BK,IAA3B,CAFxB;;AAAA;AAEE,iBAAKL,QAFP;AAGEG,YAAAA,IAAI;;AAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMAb,UAAU,CAACgB,GAAX,CAAe,MAAf,EAAuBJ,IAAvB;;SAEeK,c;;;;;6EAAf,kBAA8BT,KAA9B,EAAqCE,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqB,KAAKQ,OAAL,CAAa;AAAEV,cAAAA,KAAK,EAALA;AAAF,aAAb,CADrB;;AAAA;AACQW,YAAAA,IADR;;AAAA,iBAEMA,IAFN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGuBpB,MAAM,CAACqB,OAAP,CAAeV,QAAf,EAAyBS,IAAI,CAACT,QAA9B,CAHvB;;AAAA;AAGUW,YAAAA,IAHV;;AAAA,iBAIQA,IAJR;AAAA;AAAA;AAAA;;AAAA,8CAKaF,IALb;;AAAA;AAAA,kBAOUG,KAAK,CAAC,oBAAD,CAPf;;AAAA;AAAA,kBAUQA,KAAK,CAAC,iBAAD,CAVb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaAtB,UAAU,CAACuB,OAAX,CAAmBC,KAAnB,GAA2BP,cAA3B;AAEAQ,MAAM,CAACC,OAAP,GAAiB9B,QAAQ,CAAC+B,KAAT,CAAe,MAAf,EAAuB3B,UAAvB,CAAjB","sourcesContent":["const mongoose = require('mongoose');\nconst { isEmail } = require('validator');\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema({\n  userName: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter a user name']\n  },\n  email: {\n    type: String,\n    trim: true,\n    default: '',\n    unique: true,\n    required: [true, 'Please enter an email address'],\n    validate: [isEmail, 'Please enter a valid email address']\n  },\n  password: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please enter a password'],\n    minlength: [8, 'Password must be at least 8 characters']\n  }\n});\n\nasync function hash(next) {\n  const salt = await bcrypt.genSalt();\n  this.password = await bcrypt.hash(this.password, salt);\n  next();\n}\n\nuserSchema.pre('save', hash);\n\nasync function verifyPassword(email, password) {\n  const user = await this.findOne({ email });\n  if (user) {\n    const auth = await bcrypt.compare(password, user.password);\n    if (auth) {\n      return user;\n    }\n    throw Error('Incorrect password');\n  }\n\n  throw Error('Incorrect email');\n}\n\nuserSchema.statics.login = verifyPassword;\n\nmodule.exports = mongoose.model('user', userSchema);\n"]},"metadata":{},"sourceType":"script"}