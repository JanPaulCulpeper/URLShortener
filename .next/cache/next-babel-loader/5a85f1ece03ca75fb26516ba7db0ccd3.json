{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useRouter } from 'next/router';\nimport Navigation from '../components/Navigation';\nimport { authSelectors, urlSelectors } from '../store/selectors';\nimport { authActions, urlActions } from '../store/actions';\nimport UserIcon from '../components/UserIcon';\nimport Form from '../components/Form';\nimport URL from '../constants';\n\nvar Home = function Home() {\n  var router = useRouter();\n  var dispatch = useDispatch();\n  var authToken = useSelector(authSelectors.selectAuthToken);\n  var currentUrl = useSelector(urlSelectors.selectCurrentUrl);\n\n  var _React$useState = React.useState({\n    url: '',\n    custom: ''\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      values = _React$useState2[0],\n      setValues = _React$useState2[1];\n\n  var url = values.url,\n      custom = values.custom;\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      current = _React$useState4[0],\n      setCurrent = _React$useState4[1];\n\n  var loading = useSelector(authSelectors.selectLoading);\n  var urlError = useSelector(urlSelectors.selectError);\n  var handleSubmit = React.useCallback(function (e) {\n    e.preventDefault();\n    setCurrent(custom);\n\n    if (authToken) {\n      if (url !== '' && custom !== '') {\n        dispatch(urlActions.shorten({\n          custom: custom,\n          url: url\n        }));\n      } else toast('Cannot have empty fields!', {\n        type: 'error'\n      });\n    }\n  }, [values, current]);\n  var Logout = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(authActions.logout());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [dispatch, authActions]);\n  React.useEffect(function () {\n    if (urlError) toast(urlError, {\n      type: 'error'\n    });\n  }, [urlError]);\n  return __jsx(React.Fragment, null, !authToken && loading ? 'Loading...' : __jsx(React.Fragment, null, __jsx(ToastContainer, null), __jsx(Navigation, {\n    Title: \"URL-shortener\",\n    Links: [{\n      title: 'Login',\n      ref: '/login',\n      condition: !!authToken,\n      replacement: __jsx(UserIcon, {\n        Actions: [{\n          name: 'Dashboard',\n          act: function act() {\n            return router.push('/dashboard');\n          }\n        }, {\n          name: 'Logout',\n          act: Logout\n        }],\n        Letter: authToken === null || authToken === void 0 ? void 0 : authToken.userName[0]\n      })\n    }]\n  }), __jsx(Form, {\n    Title: \"Shorten your URL\",\n    ParentState: [values, setValues],\n    SubmitFunction: handleSubmit,\n    Inputs: [{\n      label: 'URL',\n      id: 'url',\n      type: 'text'\n    }, {\n      id: 'custom',\n      type: 'text',\n      exteriorLabel: \"your-custom-path\"\n    }],\n    LowerText: {\n      info: currentUrl ? null : \"\".concat(URL).concat(values.custom || 'your custom path'),\n      link: authToken ? {\n        name: currentUrl ? \"\".concat(URL).concat(current) : null,\n        ref: currentUrl ? \"\".concat(URL).concat(current) : null\n      } : {}\n    }\n  }), ' '));\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}